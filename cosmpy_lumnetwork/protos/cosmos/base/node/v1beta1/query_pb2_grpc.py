# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from cosmos.base.node.v1beta1 import query_pb2 as cosmos_dot_base_dot_node_dot_v1beta1_dot_query__pb2


class ServiceStub(object):
  """Service defines the gRPC querier service for node related queries.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Config = channel.unary_unary(
        '/cosmos.base.node.v1beta1.Service/Config',
        request_serializer=cosmos_dot_base_dot_node_dot_v1beta1_dot_query__pb2.ConfigRequest.SerializeToString,
        response_deserializer=cosmos_dot_base_dot_node_dot_v1beta1_dot_query__pb2.ConfigResponse.FromString,
        )


class ServiceServicer(object):
  """Service defines the gRPC querier service for node related queries.
  """

  def Config(self, request, context):
    """Config queries for the operator configuration.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Config': grpc.unary_unary_rpc_method_handler(
          servicer.Config,
          request_deserializer=cosmos_dot_base_dot_node_dot_v1beta1_dot_query__pb2.ConfigRequest.FromString,
          response_serializer=cosmos_dot_base_dot_node_dot_v1beta1_dot_query__pb2.ConfigResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'cosmos.base.node.v1beta1.Service', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
