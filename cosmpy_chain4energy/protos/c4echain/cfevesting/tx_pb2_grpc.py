# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from c4echain.cfevesting import tx_pb2 as c4echain_dot_cfevesting_dot_tx__pb2


class MsgStub(object):
    """Msg defines the Msg service.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateVestingPool = channel.unary_unary(
                '/chain4energy.c4echain.cfevesting.Msg/CreateVestingPool',
                request_serializer=c4echain_dot_cfevesting_dot_tx__pb2.MsgCreateVestingPool.SerializeToString,
                response_deserializer=c4echain_dot_cfevesting_dot_tx__pb2.MsgCreateVestingPoolResponse.FromString,
                )
        self.WithdrawAllAvailable = channel.unary_unary(
                '/chain4energy.c4echain.cfevesting.Msg/WithdrawAllAvailable',
                request_serializer=c4echain_dot_cfevesting_dot_tx__pb2.MsgWithdrawAllAvailable.SerializeToString,
                response_deserializer=c4echain_dot_cfevesting_dot_tx__pb2.MsgWithdrawAllAvailableResponse.FromString,
                )
        self.CreateVestingAccount = channel.unary_unary(
                '/chain4energy.c4echain.cfevesting.Msg/CreateVestingAccount',
                request_serializer=c4echain_dot_cfevesting_dot_tx__pb2.MsgCreateVestingAccount.SerializeToString,
                response_deserializer=c4echain_dot_cfevesting_dot_tx__pb2.MsgCreateVestingAccountResponse.FromString,
                )
        self.SendToVestingAccount = channel.unary_unary(
                '/chain4energy.c4echain.cfevesting.Msg/SendToVestingAccount',
                request_serializer=c4echain_dot_cfevesting_dot_tx__pb2.MsgSendToVestingAccount.SerializeToString,
                response_deserializer=c4echain_dot_cfevesting_dot_tx__pb2.MsgSendToVestingAccountResponse.FromString,
                )
        self.SplitVesting = channel.unary_unary(
                '/chain4energy.c4echain.cfevesting.Msg/SplitVesting',
                request_serializer=c4echain_dot_cfevesting_dot_tx__pb2.MsgSplitVesting.SerializeToString,
                response_deserializer=c4echain_dot_cfevesting_dot_tx__pb2.MsgSplitVestingResponse.FromString,
                )
        self.MoveAvailableVesting = channel.unary_unary(
                '/chain4energy.c4echain.cfevesting.Msg/MoveAvailableVesting',
                request_serializer=c4echain_dot_cfevesting_dot_tx__pb2.MsgMoveAvailableVesting.SerializeToString,
                response_deserializer=c4echain_dot_cfevesting_dot_tx__pb2.MsgMoveAvailableVestingResponse.FromString,
                )
        self.MoveAvailableVestingByDenoms = channel.unary_unary(
                '/chain4energy.c4echain.cfevesting.Msg/MoveAvailableVestingByDenoms',
                request_serializer=c4echain_dot_cfevesting_dot_tx__pb2.MsgMoveAvailableVestingByDenoms.SerializeToString,
                response_deserializer=c4echain_dot_cfevesting_dot_tx__pb2.MsgMoveAvailableVestingByDenomsResponse.FromString,
                )
        self.UpdateDenomParam = channel.unary_unary(
                '/chain4energy.c4echain.cfevesting.Msg/UpdateDenomParam',
                request_serializer=c4echain_dot_cfevesting_dot_tx__pb2.MsgUpdateDenomParam.SerializeToString,
                response_deserializer=c4echain_dot_cfevesting_dot_tx__pb2.MsgUpdateDenomParamResponse.FromString,
                )


class MsgServicer(object):
    """Msg defines the Msg service.
    """

    def CreateVestingPool(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WithdrawAllAvailable(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateVestingAccount(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendToVestingAccount(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SplitVesting(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MoveAvailableVesting(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MoveAvailableVestingByDenoms(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateDenomParam(self, request, context):
        """this line is used by starport scaffolding # proto/tx/rpc
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MsgServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateVestingPool': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateVestingPool,
                    request_deserializer=c4echain_dot_cfevesting_dot_tx__pb2.MsgCreateVestingPool.FromString,
                    response_serializer=c4echain_dot_cfevesting_dot_tx__pb2.MsgCreateVestingPoolResponse.SerializeToString,
            ),
            'WithdrawAllAvailable': grpc.unary_unary_rpc_method_handler(
                    servicer.WithdrawAllAvailable,
                    request_deserializer=c4echain_dot_cfevesting_dot_tx__pb2.MsgWithdrawAllAvailable.FromString,
                    response_serializer=c4echain_dot_cfevesting_dot_tx__pb2.MsgWithdrawAllAvailableResponse.SerializeToString,
            ),
            'CreateVestingAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateVestingAccount,
                    request_deserializer=c4echain_dot_cfevesting_dot_tx__pb2.MsgCreateVestingAccount.FromString,
                    response_serializer=c4echain_dot_cfevesting_dot_tx__pb2.MsgCreateVestingAccountResponse.SerializeToString,
            ),
            'SendToVestingAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.SendToVestingAccount,
                    request_deserializer=c4echain_dot_cfevesting_dot_tx__pb2.MsgSendToVestingAccount.FromString,
                    response_serializer=c4echain_dot_cfevesting_dot_tx__pb2.MsgSendToVestingAccountResponse.SerializeToString,
            ),
            'SplitVesting': grpc.unary_unary_rpc_method_handler(
                    servicer.SplitVesting,
                    request_deserializer=c4echain_dot_cfevesting_dot_tx__pb2.MsgSplitVesting.FromString,
                    response_serializer=c4echain_dot_cfevesting_dot_tx__pb2.MsgSplitVestingResponse.SerializeToString,
            ),
            'MoveAvailableVesting': grpc.unary_unary_rpc_method_handler(
                    servicer.MoveAvailableVesting,
                    request_deserializer=c4echain_dot_cfevesting_dot_tx__pb2.MsgMoveAvailableVesting.FromString,
                    response_serializer=c4echain_dot_cfevesting_dot_tx__pb2.MsgMoveAvailableVestingResponse.SerializeToString,
            ),
            'MoveAvailableVestingByDenoms': grpc.unary_unary_rpc_method_handler(
                    servicer.MoveAvailableVestingByDenoms,
                    request_deserializer=c4echain_dot_cfevesting_dot_tx__pb2.MsgMoveAvailableVestingByDenoms.FromString,
                    response_serializer=c4echain_dot_cfevesting_dot_tx__pb2.MsgMoveAvailableVestingByDenomsResponse.SerializeToString,
            ),
            'UpdateDenomParam': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateDenomParam,
                    request_deserializer=c4echain_dot_cfevesting_dot_tx__pb2.MsgUpdateDenomParam.FromString,
                    response_serializer=c4echain_dot_cfevesting_dot_tx__pb2.MsgUpdateDenomParamResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'chain4energy.c4echain.cfevesting.Msg', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Msg(object):
    """Msg defines the Msg service.
    """

    @staticmethod
    def CreateVestingPool(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chain4energy.c4echain.cfevesting.Msg/CreateVestingPool',
            c4echain_dot_cfevesting_dot_tx__pb2.MsgCreateVestingPool.SerializeToString,
            c4echain_dot_cfevesting_dot_tx__pb2.MsgCreateVestingPoolResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WithdrawAllAvailable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chain4energy.c4echain.cfevesting.Msg/WithdrawAllAvailable',
            c4echain_dot_cfevesting_dot_tx__pb2.MsgWithdrawAllAvailable.SerializeToString,
            c4echain_dot_cfevesting_dot_tx__pb2.MsgWithdrawAllAvailableResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateVestingAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chain4energy.c4echain.cfevesting.Msg/CreateVestingAccount',
            c4echain_dot_cfevesting_dot_tx__pb2.MsgCreateVestingAccount.SerializeToString,
            c4echain_dot_cfevesting_dot_tx__pb2.MsgCreateVestingAccountResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendToVestingAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chain4energy.c4echain.cfevesting.Msg/SendToVestingAccount',
            c4echain_dot_cfevesting_dot_tx__pb2.MsgSendToVestingAccount.SerializeToString,
            c4echain_dot_cfevesting_dot_tx__pb2.MsgSendToVestingAccountResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SplitVesting(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chain4energy.c4echain.cfevesting.Msg/SplitVesting',
            c4echain_dot_cfevesting_dot_tx__pb2.MsgSplitVesting.SerializeToString,
            c4echain_dot_cfevesting_dot_tx__pb2.MsgSplitVestingResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MoveAvailableVesting(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chain4energy.c4echain.cfevesting.Msg/MoveAvailableVesting',
            c4echain_dot_cfevesting_dot_tx__pb2.MsgMoveAvailableVesting.SerializeToString,
            c4echain_dot_cfevesting_dot_tx__pb2.MsgMoveAvailableVestingResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MoveAvailableVestingByDenoms(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chain4energy.c4echain.cfevesting.Msg/MoveAvailableVestingByDenoms',
            c4echain_dot_cfevesting_dot_tx__pb2.MsgMoveAvailableVestingByDenoms.SerializeToString,
            c4echain_dot_cfevesting_dot_tx__pb2.MsgMoveAvailableVestingByDenomsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateDenomParam(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chain4energy.c4echain.cfevesting.Msg/UpdateDenomParam',
            c4echain_dot_cfevesting_dot_tx__pb2.MsgUpdateDenomParam.SerializeToString,
            c4echain_dot_cfevesting_dot_tx__pb2.MsgUpdateDenomParamResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
