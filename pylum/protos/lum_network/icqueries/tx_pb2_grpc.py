# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from lum_network.icqueries import tx_pb2 as lum__network_dot_icqueries_dot_tx__pb2


class MsgStub(object):
  """Msg defines the icqueries Msg service.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.SubmitQueryResponse = channel.unary_unary(
        '/stride.interchainquery.v1.Msg/SubmitQueryResponse',
        request_serializer=lum__network_dot_icqueries_dot_tx__pb2.MsgSubmitQueryResponse.SerializeToString,
        response_deserializer=lum__network_dot_icqueries_dot_tx__pb2.MsgSubmitQueryResponseResponse.FromString,
        )


class MsgServicer(object):
  """Msg defines the icqueries Msg service.
  """

  def SubmitQueryResponse(self, request, context):
    """SubmitQueryResponse defines a method for submit query responses.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_MsgServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'SubmitQueryResponse': grpc.unary_unary_rpc_method_handler(
          servicer.SubmitQueryResponse,
          request_deserializer=lum__network_dot_icqueries_dot_tx__pb2.MsgSubmitQueryResponse.FromString,
          response_serializer=lum__network_dot_icqueries_dot_tx__pb2.MsgSubmitQueryResponseResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'stride.interchainquery.v1.Msg', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
