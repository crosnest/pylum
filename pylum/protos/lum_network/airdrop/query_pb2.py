# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: lum-network/airdrop/query.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from gogoproto import gogo_pb2 as gogoproto_dot_gogo__pb2
from google.api import annotations_pb2 as google_dot_api_dot_annotations__pb2
from cosmos.base.query.v1beta1 import pagination_pb2 as cosmos_dot_base_dot_query_dot_v1beta1_dot_pagination__pb2
from cosmos.base.v1beta1 import coin_pb2 as cosmos_dot_base_dot_v1beta1_dot_coin__pb2
from lum_network.airdrop import claim_pb2 as lum__network_dot_airdrop_dot_claim__pb2
from lum_network.airdrop import params_pb2 as lum__network_dot_airdrop_dot_params__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='lum-network/airdrop/query.proto',
  package='lum.network.airdrop',
  syntax='proto3',
  serialized_pb=_b('\n\x1flum-network/airdrop/query.proto\x12\x13lum.network.airdrop\x1a\x14gogoproto/gogo.proto\x1a\x1cgoogle/api/annotations.proto\x1a*cosmos/base/query/v1beta1/pagination.proto\x1a\x1e\x63osmos/base/v1beta1/coin.proto\x1a\x1flum-network/airdrop/claim.proto\x1a lum-network/airdrop/params.proto\"\"\n QueryModuleAccountBalanceRequest\"\x9e\x01\n!QueryModuleAccountBalanceResponse\x12y\n\x14moduleAccountBalance\x18\x01 \x03(\x0b\x32\x19.cosmos.base.v1beta1.CoinB@\xf2\xde\x1f\x0cyaml:\"coins\"\xc8\xde\x1f\x00\xaa\xdf\x1f(github.com/cosmos/cosmos-sdk/types.Coins\"\x14\n\x12QueryParamsRequest\"H\n\x13QueryParamsResponse\x12\x31\n\x06params\x18\x01 \x01(\x0b\x32\x1b.lum.network.airdrop.ParamsB\x04\xc8\xde\x1f\x00\"=\n\x17QueryClaimRecordRequest\x12\"\n\x07\x61\x64\x64ress\x18\x01 \x01(\tB\x11\xf2\xde\x1f\ryaml:\"sender\"\"o\n\x18QueryClaimRecordResponse\x12S\n\x0c\x63laim_record\x18\x01 \x01(\x0b\x32 .lum.network.airdrop.ClaimRecordB\x1b\xf2\xde\x1f\x13yaml:\"claim_record\"\xc8\xde\x1f\x00\"\x85\x01\n\x1eQueryClaimableForActionRequest\x12#\n\x07\x61\x64\x64ress\x18\x01 \x01(\tB\x12\xf2\xde\x1f\x0eyaml:\"address\"\x12>\n\x06\x61\x63tion\x18\x02 \x01(\x0e\x32\x1b.lum.network.airdrop.ActionB\x11\xf2\xde\x1f\ryaml:\"action\"\"\x8d\x01\n\x1fQueryClaimableForActionResponse\x12j\n\x05\x63oins\x18\x01 \x03(\x0b\x32\x19.cosmos.base.v1beta1.CoinB@\xf2\xde\x1f\x0cyaml:\"coins\"\xc8\xde\x1f\x00\xaa\xdf\x1f(github.com/cosmos/cosmos-sdk/types.Coins\"A\n\x1aQueryTotalClaimableRequest\x12#\n\x07\x61\x64\x64ress\x18\x01 \x01(\tB\x12\xf2\xde\x1f\x0eyaml:\"address\"\"\x89\x01\n\x1bQueryTotalClaimableResponse\x12j\n\x05\x63oins\x18\x01 \x03(\x0b\x32\x19.cosmos.base.v1beta1.CoinB@\xf2\xde\x1f\x0cyaml:\"coins\"\xc8\xde\x1f\x00\xaa\xdf\x1f(github.com/cosmos/cosmos-sdk/types.Coins2\xe9\x06\n\x05Query\x12\xbc\x01\n\x14ModuleAccountBalance\x12\x35.lum.network.airdrop.QueryModuleAccountBalanceRequest\x1a\x36.lum.network.airdrop.QueryModuleAccountBalanceResponse\"5\x82\xd3\xe4\x93\x02/\x12-/osmosis/claim/v1beta1/module_account_balance\x12\x82\x01\n\x06Params\x12\'.lum.network.airdrop.QueryParamsRequest\x1a(.lum.network.airdrop.QueryParamsResponse\"%\x82\xd3\xe4\x93\x02\x1f\x12\x1d/osmosis/claim/v1beta1/params\x12\xa1\x01\n\x0b\x43laimRecord\x12,.lum.network.airdrop.QueryClaimRecordRequest\x1a-.lum.network.airdrop.QueryClaimRecordResponse\"5\x82\xd3\xe4\x93\x02/\x12-/osmosis/claim/v1beta1/claim_record/{address}\x12\xc7\x01\n\x12\x43laimableForAction\x12\x33.lum.network.airdrop.QueryClaimableForActionRequest\x1a\x34.lum.network.airdrop.QueryClaimableForActionResponse\"F\x82\xd3\xe4\x93\x02@\x12>/osmosis/claim/v1beta1/claimable_for_action/{address}/{action}\x12\xad\x01\n\x0eTotalClaimable\x12/.lum.network.airdrop.QueryTotalClaimableRequest\x1a\x30.lum.network.airdrop.QueryTotalClaimableResponse\"8\x82\xd3\xe4\x93\x02\x32\x12\x30/osmosis/claim/v1beta1/total_claimable/{address}B.Z,github.com/lum-network/chain/x/airdrop/typesb\x06proto3')
  ,
  dependencies=[gogoproto_dot_gogo__pb2.DESCRIPTOR,google_dot_api_dot_annotations__pb2.DESCRIPTOR,cosmos_dot_base_dot_query_dot_v1beta1_dot_pagination__pb2.DESCRIPTOR,cosmos_dot_base_dot_v1beta1_dot_coin__pb2.DESCRIPTOR,lum__network_dot_airdrop_dot_claim__pb2.DESCRIPTOR,lum__network_dot_airdrop_dot_params__pb2.DESCRIPTOR,])




_QUERYMODULEACCOUNTBALANCEREQUEST = _descriptor.Descriptor(
  name='QueryModuleAccountBalanceRequest',
  full_name='lum.network.airdrop.QueryModuleAccountBalanceRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=251,
  serialized_end=285,
)


_QUERYMODULEACCOUNTBALANCERESPONSE = _descriptor.Descriptor(
  name='QueryModuleAccountBalanceResponse',
  full_name='lum.network.airdrop.QueryModuleAccountBalanceResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='moduleAccountBalance', full_name='lum.network.airdrop.QueryModuleAccountBalanceResponse.moduleAccountBalance', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\362\336\037\014yaml:\"coins\"\310\336\037\000\252\337\037(github.com/cosmos/cosmos-sdk/types.Coins')), file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=288,
  serialized_end=446,
)


_QUERYPARAMSREQUEST = _descriptor.Descriptor(
  name='QueryParamsRequest',
  full_name='lum.network.airdrop.QueryParamsRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=448,
  serialized_end=468,
)


_QUERYPARAMSRESPONSE = _descriptor.Descriptor(
  name='QueryParamsResponse',
  full_name='lum.network.airdrop.QueryParamsResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='params', full_name='lum.network.airdrop.QueryParamsResponse.params', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\310\336\037\000')), file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=470,
  serialized_end=542,
)


_QUERYCLAIMRECORDREQUEST = _descriptor.Descriptor(
  name='QueryClaimRecordRequest',
  full_name='lum.network.airdrop.QueryClaimRecordRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='address', full_name='lum.network.airdrop.QueryClaimRecordRequest.address', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\362\336\037\ryaml:\"sender\"')), file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=544,
  serialized_end=605,
)


_QUERYCLAIMRECORDRESPONSE = _descriptor.Descriptor(
  name='QueryClaimRecordResponse',
  full_name='lum.network.airdrop.QueryClaimRecordResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='claim_record', full_name='lum.network.airdrop.QueryClaimRecordResponse.claim_record', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\362\336\037\023yaml:\"claim_record\"\310\336\037\000')), file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=607,
  serialized_end=718,
)


_QUERYCLAIMABLEFORACTIONREQUEST = _descriptor.Descriptor(
  name='QueryClaimableForActionRequest',
  full_name='lum.network.airdrop.QueryClaimableForActionRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='address', full_name='lum.network.airdrop.QueryClaimableForActionRequest.address', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\362\336\037\016yaml:\"address\"')), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='action', full_name='lum.network.airdrop.QueryClaimableForActionRequest.action', index=1,
      number=2, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\362\336\037\ryaml:\"action\"')), file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=721,
  serialized_end=854,
)


_QUERYCLAIMABLEFORACTIONRESPONSE = _descriptor.Descriptor(
  name='QueryClaimableForActionResponse',
  full_name='lum.network.airdrop.QueryClaimableForActionResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='coins', full_name='lum.network.airdrop.QueryClaimableForActionResponse.coins', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\362\336\037\014yaml:\"coins\"\310\336\037\000\252\337\037(github.com/cosmos/cosmos-sdk/types.Coins')), file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=857,
  serialized_end=998,
)


_QUERYTOTALCLAIMABLEREQUEST = _descriptor.Descriptor(
  name='QueryTotalClaimableRequest',
  full_name='lum.network.airdrop.QueryTotalClaimableRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='address', full_name='lum.network.airdrop.QueryTotalClaimableRequest.address', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\362\336\037\016yaml:\"address\"')), file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1000,
  serialized_end=1065,
)


_QUERYTOTALCLAIMABLERESPONSE = _descriptor.Descriptor(
  name='QueryTotalClaimableResponse',
  full_name='lum.network.airdrop.QueryTotalClaimableResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='coins', full_name='lum.network.airdrop.QueryTotalClaimableResponse.coins', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\362\336\037\014yaml:\"coins\"\310\336\037\000\252\337\037(github.com/cosmos/cosmos-sdk/types.Coins')), file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1068,
  serialized_end=1205,
)

_QUERYMODULEACCOUNTBALANCERESPONSE.fields_by_name['moduleAccountBalance'].message_type = cosmos_dot_base_dot_v1beta1_dot_coin__pb2._COIN
_QUERYPARAMSRESPONSE.fields_by_name['params'].message_type = lum__network_dot_airdrop_dot_params__pb2._PARAMS
_QUERYCLAIMRECORDRESPONSE.fields_by_name['claim_record'].message_type = lum__network_dot_airdrop_dot_claim__pb2._CLAIMRECORD
_QUERYCLAIMABLEFORACTIONREQUEST.fields_by_name['action'].enum_type = lum__network_dot_airdrop_dot_claim__pb2._ACTION
_QUERYCLAIMABLEFORACTIONRESPONSE.fields_by_name['coins'].message_type = cosmos_dot_base_dot_v1beta1_dot_coin__pb2._COIN
_QUERYTOTALCLAIMABLERESPONSE.fields_by_name['coins'].message_type = cosmos_dot_base_dot_v1beta1_dot_coin__pb2._COIN
DESCRIPTOR.message_types_by_name['QueryModuleAccountBalanceRequest'] = _QUERYMODULEACCOUNTBALANCEREQUEST
DESCRIPTOR.message_types_by_name['QueryModuleAccountBalanceResponse'] = _QUERYMODULEACCOUNTBALANCERESPONSE
DESCRIPTOR.message_types_by_name['QueryParamsRequest'] = _QUERYPARAMSREQUEST
DESCRIPTOR.message_types_by_name['QueryParamsResponse'] = _QUERYPARAMSRESPONSE
DESCRIPTOR.message_types_by_name['QueryClaimRecordRequest'] = _QUERYCLAIMRECORDREQUEST
DESCRIPTOR.message_types_by_name['QueryClaimRecordResponse'] = _QUERYCLAIMRECORDRESPONSE
DESCRIPTOR.message_types_by_name['QueryClaimableForActionRequest'] = _QUERYCLAIMABLEFORACTIONREQUEST
DESCRIPTOR.message_types_by_name['QueryClaimableForActionResponse'] = _QUERYCLAIMABLEFORACTIONRESPONSE
DESCRIPTOR.message_types_by_name['QueryTotalClaimableRequest'] = _QUERYTOTALCLAIMABLEREQUEST
DESCRIPTOR.message_types_by_name['QueryTotalClaimableResponse'] = _QUERYTOTALCLAIMABLERESPONSE
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

QueryModuleAccountBalanceRequest = _reflection.GeneratedProtocolMessageType('QueryModuleAccountBalanceRequest', (_message.Message,), dict(
  DESCRIPTOR = _QUERYMODULEACCOUNTBALANCEREQUEST,
  __module__ = 'lum_network.airdrop.query_pb2'
  # @@protoc_insertion_point(class_scope:lum.network.airdrop.QueryModuleAccountBalanceRequest)
  ))
_sym_db.RegisterMessage(QueryModuleAccountBalanceRequest)

QueryModuleAccountBalanceResponse = _reflection.GeneratedProtocolMessageType('QueryModuleAccountBalanceResponse', (_message.Message,), dict(
  DESCRIPTOR = _QUERYMODULEACCOUNTBALANCERESPONSE,
  __module__ = 'lum_network.airdrop.query_pb2'
  # @@protoc_insertion_point(class_scope:lum.network.airdrop.QueryModuleAccountBalanceResponse)
  ))
_sym_db.RegisterMessage(QueryModuleAccountBalanceResponse)

QueryParamsRequest = _reflection.GeneratedProtocolMessageType('QueryParamsRequest', (_message.Message,), dict(
  DESCRIPTOR = _QUERYPARAMSREQUEST,
  __module__ = 'lum_network.airdrop.query_pb2'
  # @@protoc_insertion_point(class_scope:lum.network.airdrop.QueryParamsRequest)
  ))
_sym_db.RegisterMessage(QueryParamsRequest)

QueryParamsResponse = _reflection.GeneratedProtocolMessageType('QueryParamsResponse', (_message.Message,), dict(
  DESCRIPTOR = _QUERYPARAMSRESPONSE,
  __module__ = 'lum_network.airdrop.query_pb2'
  # @@protoc_insertion_point(class_scope:lum.network.airdrop.QueryParamsResponse)
  ))
_sym_db.RegisterMessage(QueryParamsResponse)

QueryClaimRecordRequest = _reflection.GeneratedProtocolMessageType('QueryClaimRecordRequest', (_message.Message,), dict(
  DESCRIPTOR = _QUERYCLAIMRECORDREQUEST,
  __module__ = 'lum_network.airdrop.query_pb2'
  # @@protoc_insertion_point(class_scope:lum.network.airdrop.QueryClaimRecordRequest)
  ))
_sym_db.RegisterMessage(QueryClaimRecordRequest)

QueryClaimRecordResponse = _reflection.GeneratedProtocolMessageType('QueryClaimRecordResponse', (_message.Message,), dict(
  DESCRIPTOR = _QUERYCLAIMRECORDRESPONSE,
  __module__ = 'lum_network.airdrop.query_pb2'
  # @@protoc_insertion_point(class_scope:lum.network.airdrop.QueryClaimRecordResponse)
  ))
_sym_db.RegisterMessage(QueryClaimRecordResponse)

QueryClaimableForActionRequest = _reflection.GeneratedProtocolMessageType('QueryClaimableForActionRequest', (_message.Message,), dict(
  DESCRIPTOR = _QUERYCLAIMABLEFORACTIONREQUEST,
  __module__ = 'lum_network.airdrop.query_pb2'
  # @@protoc_insertion_point(class_scope:lum.network.airdrop.QueryClaimableForActionRequest)
  ))
_sym_db.RegisterMessage(QueryClaimableForActionRequest)

QueryClaimableForActionResponse = _reflection.GeneratedProtocolMessageType('QueryClaimableForActionResponse', (_message.Message,), dict(
  DESCRIPTOR = _QUERYCLAIMABLEFORACTIONRESPONSE,
  __module__ = 'lum_network.airdrop.query_pb2'
  # @@protoc_insertion_point(class_scope:lum.network.airdrop.QueryClaimableForActionResponse)
  ))
_sym_db.RegisterMessage(QueryClaimableForActionResponse)

QueryTotalClaimableRequest = _reflection.GeneratedProtocolMessageType('QueryTotalClaimableRequest', (_message.Message,), dict(
  DESCRIPTOR = _QUERYTOTALCLAIMABLEREQUEST,
  __module__ = 'lum_network.airdrop.query_pb2'
  # @@protoc_insertion_point(class_scope:lum.network.airdrop.QueryTotalClaimableRequest)
  ))
_sym_db.RegisterMessage(QueryTotalClaimableRequest)

QueryTotalClaimableResponse = _reflection.GeneratedProtocolMessageType('QueryTotalClaimableResponse', (_message.Message,), dict(
  DESCRIPTOR = _QUERYTOTALCLAIMABLERESPONSE,
  __module__ = 'lum_network.airdrop.query_pb2'
  # @@protoc_insertion_point(class_scope:lum.network.airdrop.QueryTotalClaimableResponse)
  ))
_sym_db.RegisterMessage(QueryTotalClaimableResponse)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('Z,github.com/lum-network/chain/x/airdrop/types'))
_QUERYMODULEACCOUNTBALANCERESPONSE.fields_by_name['moduleAccountBalance'].has_options = True
_QUERYMODULEACCOUNTBALANCERESPONSE.fields_by_name['moduleAccountBalance']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\362\336\037\014yaml:\"coins\"\310\336\037\000\252\337\037(github.com/cosmos/cosmos-sdk/types.Coins'))
_QUERYPARAMSRESPONSE.fields_by_name['params'].has_options = True
_QUERYPARAMSRESPONSE.fields_by_name['params']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\310\336\037\000'))
_QUERYCLAIMRECORDREQUEST.fields_by_name['address'].has_options = True
_QUERYCLAIMRECORDREQUEST.fields_by_name['address']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\362\336\037\ryaml:\"sender\"'))
_QUERYCLAIMRECORDRESPONSE.fields_by_name['claim_record'].has_options = True
_QUERYCLAIMRECORDRESPONSE.fields_by_name['claim_record']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\362\336\037\023yaml:\"claim_record\"\310\336\037\000'))
_QUERYCLAIMABLEFORACTIONREQUEST.fields_by_name['address'].has_options = True
_QUERYCLAIMABLEFORACTIONREQUEST.fields_by_name['address']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\362\336\037\016yaml:\"address\"'))
_QUERYCLAIMABLEFORACTIONREQUEST.fields_by_name['action'].has_options = True
_QUERYCLAIMABLEFORACTIONREQUEST.fields_by_name['action']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\362\336\037\ryaml:\"action\"'))
_QUERYCLAIMABLEFORACTIONRESPONSE.fields_by_name['coins'].has_options = True
_QUERYCLAIMABLEFORACTIONRESPONSE.fields_by_name['coins']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\362\336\037\014yaml:\"coins\"\310\336\037\000\252\337\037(github.com/cosmos/cosmos-sdk/types.Coins'))
_QUERYTOTALCLAIMABLEREQUEST.fields_by_name['address'].has_options = True
_QUERYTOTALCLAIMABLEREQUEST.fields_by_name['address']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\362\336\037\016yaml:\"address\"'))
_QUERYTOTALCLAIMABLERESPONSE.fields_by_name['coins'].has_options = True
_QUERYTOTALCLAIMABLERESPONSE.fields_by_name['coins']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\362\336\037\014yaml:\"coins\"\310\336\037\000\252\337\037(github.com/cosmos/cosmos-sdk/types.Coins'))

_QUERY = _descriptor.ServiceDescriptor(
  name='Query',
  full_name='lum.network.airdrop.Query',
  file=DESCRIPTOR,
  index=0,
  options=None,
  serialized_start=1208,
  serialized_end=2081,
  methods=[
  _descriptor.MethodDescriptor(
    name='ModuleAccountBalance',
    full_name='lum.network.airdrop.Query.ModuleAccountBalance',
    index=0,
    containing_service=None,
    input_type=_QUERYMODULEACCOUNTBALANCEREQUEST,
    output_type=_QUERYMODULEACCOUNTBALANCERESPONSE,
    options=_descriptor._ParseOptions(descriptor_pb2.MethodOptions(), _b('\202\323\344\223\002/\022-/osmosis/claim/v1beta1/module_account_balance')),
  ),
  _descriptor.MethodDescriptor(
    name='Params',
    full_name='lum.network.airdrop.Query.Params',
    index=1,
    containing_service=None,
    input_type=_QUERYPARAMSREQUEST,
    output_type=_QUERYPARAMSRESPONSE,
    options=_descriptor._ParseOptions(descriptor_pb2.MethodOptions(), _b('\202\323\344\223\002\037\022\035/osmosis/claim/v1beta1/params')),
  ),
  _descriptor.MethodDescriptor(
    name='ClaimRecord',
    full_name='lum.network.airdrop.Query.ClaimRecord',
    index=2,
    containing_service=None,
    input_type=_QUERYCLAIMRECORDREQUEST,
    output_type=_QUERYCLAIMRECORDRESPONSE,
    options=_descriptor._ParseOptions(descriptor_pb2.MethodOptions(), _b('\202\323\344\223\002/\022-/osmosis/claim/v1beta1/claim_record/{address}')),
  ),
  _descriptor.MethodDescriptor(
    name='ClaimableForAction',
    full_name='lum.network.airdrop.Query.ClaimableForAction',
    index=3,
    containing_service=None,
    input_type=_QUERYCLAIMABLEFORACTIONREQUEST,
    output_type=_QUERYCLAIMABLEFORACTIONRESPONSE,
    options=_descriptor._ParseOptions(descriptor_pb2.MethodOptions(), _b('\202\323\344\223\002@\022>/osmosis/claim/v1beta1/claimable_for_action/{address}/{action}')),
  ),
  _descriptor.MethodDescriptor(
    name='TotalClaimable',
    full_name='lum.network.airdrop.Query.TotalClaimable',
    index=4,
    containing_service=None,
    input_type=_QUERYTOTALCLAIMABLEREQUEST,
    output_type=_QUERYTOTALCLAIMABLERESPONSE,
    options=_descriptor._ParseOptions(descriptor_pb2.MethodOptions(), _b('\202\323\344\223\0022\0220/osmosis/claim/v1beta1/total_claimable/{address}')),
  ),
])
_sym_db.RegisterServiceDescriptor(_QUERY)

DESCRIPTOR.services_by_name['Query'] = _QUERY

# @@protoc_insertion_point(module_scope)
